<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Blog优化日志]]></title>
      <url>http://yoursite.com/2016/05/24/Blog%E4%BC%98%E5%8C%96%E5%BF%97.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>blog框架:hexo<br>主题框架: NexT</p>
</blockquote>
<h2 id="1-SEO-优化"><a href="#1-SEO-优化" class="headerlink" title="1. SEO 优化"></a>1. SEO 优化</h2><h4 id="title优化"><a href="#title优化" class="headerlink" title="title优化"></a>title优化</h4><p><strong>更改index.swig文件</strong></p>
<blockquote>
<p>文件路径是\themes\next\layou</p>
</blockquote>
<pre><code>{% block title %} 
  	{{ config.title }} 
	{% endblock %}
</code></pre><p>改成:</p>
<pre><code>{% block title %} 
  		{{ config.title }} - {{ theme.description }} 
	{% endblock %}
</code></pre><h4 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h4><p>添加sitemap便于搜索引擎可以更加友好的抓取博客内容:</p>
<ul>
<li><p>在博客根目录下运行:</p>
<p>  npm install hexo-generator-sitemap –save<br>  npm install hexo-generator-baidu-sitemap –save</p>
</li>
<li><p>配置_config.yml</p>
<pre><code>#hexo sitemap网站地图
sitemap:
path: sitemap.xml
</code></pre></li>
</ul>
<blockquote>
<p>看到有些网站说在配置_config.yml时也要添加</p>
<pre><code>  baidusitemap:
path: baidusitemap.xml
</code></pre><p>表示添加后直接编译不过，不用添加其实也可以生成baidusitemap.xml</p>
</blockquote>
<h4 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加robots.txt</h4><p>将该文件添加至source文件夹下</p>
<pre><code>User-agent: *
Allow: /
Allow: /archives/
Allow: /categories/
Allow: /about/

Disallow: /vendors/
Disallow: /js/
Disallow: /css/
Disallow: /fonts/
Disallow: /vendors/
Disallow: /fancybox/

Sitemap: http://{域名}/sitemap.xml
Sitemap: http://{域名}/baidusitemap.xml
</code></pre><p>Allow:允许抓取</p>
<p>Disallow:不允许抓取</p>
<h2 id="2-字体优化"><a href="#2-字体优化" class="headerlink" title="2. 字体优化"></a>2. 字体优化</h2><h4 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式:"></a>三种方式:</h4><ol>
<li><p>直接在主题配置文件里面禁用font:</p>
<pre><code>font:
      enable: true
</code></pre></li>
<li><p>修改font的host,因为默认是googleapis所以国内访问巨慢:</p>
<pre><code>font:
      enable: true

      # Uri of fonts host. E.g. //fonts.googleapis.com (Default)
      host: fonts.useso.com
</code></pre></li>
<li><p>NexT主题的话如果不嫌麻烦还可以直接:</p>
<p>themes&gt;next&gt;layout&gt;_partials&gt;head&gt;external-fonts.swig</p>
</li>
</ol>
<pre><code>{% if font_families !== '' %}
	 
    	{% set font_families += '&subset=latin,latin-ext' %}
    	{% set font_host = font_config.host | default('//fonts.useso.com') %}
    	<link href="{{ font_host }}/css?family={{ font_families }}" rel="stylesheet" type="text/css">
    	{% endif %}
</code></pre><h2 id="3-资源文件压缩"><a href="#3-资源文件压缩" class="headerlink" title="3. 资源文件压缩"></a>3. 资源文件压缩</h2><h5 id="使用gulp"><a href="#使用gulp" class="headerlink" title="使用gulp"></a>使用gulp</h5><ul>
<li><p>添加 gulpfile.js 至与_config.yml同目录的地方,写内容的时候注意一下目录是否与本网站一致</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var minifycss = require(&apos;gulp-minify-css&apos;);
var uglify = require(&apos;gulp-uglify&apos;);
var minifyHTML = require(&quot;gulp-minify-html&quot;);
var htmlclean = require(&apos;gulp-htmlclean&apos;);
var gutil = require(&apos;gulp-util&apos;);
var minifyInline = require(&apos;gulp-minify-inline&apos;);
var inline = require(&apos;gulp-inline&apos;)
var inlineimage = require(&apos;gulp-inline-image&apos;);
</code></pre></li>
</ul>
<pre><code>// 获取 gulp-imagemin 模块
var imagemin = require(&apos;gulp-imagemin&apos;);

var dir = &apos;./public&apos;


// 压缩 public 目录 html
gulp.task(&apos;minify-html&apos;,function() {
  var opts = {
         removeComments: true,
         minifyJS: true,
         minifyCSS: true,
         minifyURLs: true,
  };
  gulp.src(&apos;./public/**/*.html&apos;)
    .pipe(inline({
        base: &apos;./public/&apos;,
        disabledTypes: [&apos;svg&apos;, &apos;img&apos;], // Only inline css files
    }))
    .pipe(minifyInline())
    .pipe(minifyHTML(opts))
    .pipe(gulp.dest(dir));
});

// 压缩 public 目录 css
gulp.task(&apos;minify-css&apos;, function() {
    gulp.src(&apos;./public/**/*.css&apos;)
        .pipe(inlineimage())
        .pipe(minifycss())
        .pipe(gulp.dest(dir));
});

// 压缩 public/js 目录 js
gulp.task(&apos;minify-js&apos;, function() {
    gulp.src(&apos;./public/**/*.js&apos;)
        .pipe(uglify().on(&apos;error&apos;, function(e){
            console.log(e);
        }))
        .pipe(gulp.dest(dir));
});


// 压缩图片任务
// 在命令行输入 gulp images 启动此任务
gulp.task(&apos;images-photos&apos;, function () {
    // 1. 找到图片
    gulp.src(&apos;./photos/*.*&apos;)
    // 2. 压缩图片
        .pipe(imagemin({
            progressive: true
        }))
    // 3. 另存图片
        .pipe(gulp.dest(&apos;dist/images&apos;))
});


// 压缩图片任务
// 在命令行输入 gulp images 启动此任务
gulp.task(&apos;images-public&apos;, function () {
    // 1. 找到图片
    gulp.src(&apos;./public/**/*.*&apos;)
    // 2. 压缩图片
        .pipe(imagemin({
            progressive: true
        }))
    // 3. 另存图片
        .pipe(gulp.dest(dir))
});


// 执行 gulp 命令时执行的任务
gulp.task(&apos;default&apos;, [
    &apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-html&apos;,
    &apos;images-photos&apos;,&apos;images-public&apos;]
    );
</code></pre><ul>
<li><p>修改package.json添加依赖包:</p>
<pre><code>&quot;gulp&quot;: &quot;^3.9.1&quot;,
&quot;gulp-htmlclean&quot;: &quot;^2.7.6&quot;,
&quot;gulp-htmlmin&quot;: &quot;^1.3.0&quot;,
&quot;gulp-imagemin&quot;: &quot;^2.4.0&quot;,
&quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,
&quot;gulp-uglify&quot;: &quot;^1.5.3&quot;,
</code></pre></li>
<li><p>安装工具gulp(全局)</p>
<pre><code>npm install gulp -g
</code></pre></li>
<li><p>如何用？</p>
<p>以前的执行步骤:</p>
<pre><code>hexo clean
hexo generate
hexo deploy
</code></pre><p>  现在的执行步骤</p>
<pre><code>hexo clean
hexo generate
gulp
hexo deploy
</code></pre></li>
</ul>
<p>–<br><strong>为了每次不重复输入这些命令，制作一个脚本去执行它:</strong></p>
<p>添加deploy.sh到与_config.yml平级的目录</p>
<pre><code>#!/bin/bash
hexo clean
hexo generate
gulp
hexo deploy
</code></pre><p>添加完成之后执行如下命令赋予权限:</p>
<pre><code>chmod +x deploy.sh
</code></pre><p>之后每次发布只需要执行:</p>
<pre><code>./deploy.sh
</code></pre><p>即可</p>
<hr>
<p>以上，完成本次优化。</p>
<p>参考博文:</p>
<blockquote>
<p><a href="http://www.selfrebuild.net/2015/06/24/Github-Hexo-Next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E5%AE%9A%E5%88%B6/" target="_blank" rel="external">Hexo博客优化 - Next主题个性化定制</a></p>
<p><a href="https://joway.wang/posts/Hexo/2016-05-17-hexo-compress-inline-static.html" target="_blank" rel="external">Hexo折腾记——通过压缩与内联提升访问速度</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[当悲剧或失望来袭，要知道你们能扛过任何事]]></title>
      <url>http://yoursite.com/2016/05/23/%E5%BD%93%E6%82%B2%E5%89%A7%E6%88%96%E5%A4%B1%E6%9C%9B%E6%9D%A5%E8%A2%AD%EF%BC%8C%E8%A6%81%E7%9F%A5%E9%81%93%E4%BD%A0%E4%BB%AC%E8%83%BD%E6%89%9B%E8%BF%87%E4%BB%BB%E4%BD%95%E4%BA%8B.html</url>
      <content type="html"><![CDATA[<p><img src="/images/sad.jpg" class="full-image"></p>
<p><strong>以下是谢丽尔·桑德伯格在加州伯克利大学2016年毕业典礼上的演讲：</strong></p>
<p>感谢玛丽，感谢各位尊敬的老师们、骄傲的父母、忠诚的朋友和各位同仁。</p>
<p>祝贺你们所有人，尤其是2016届伯克利毕业生们！</p>
<p>很荣幸能站在伯克利大学，这所学校培养了许多诺贝尔奖得主、图灵奖得主、宇航员、国会议员、奥运冠军……其中很多人都是女性！</p>
<p>伯克利始终走在时代的前沿。在20世纪60年代，从这里发起言论自由运动。回顾那个年代，当时的人们都留着长头发，雌雄莫辨。不过现在我们能区分了 —— manbuns（一种男式小发髻，丸子头）。</p>
<p>很早之前伯克利的大门就对所有人开放了。早在1873年这所大学刚建成时，这所学校就接收了167名男生和222名女生。而我的母校在90年之后才有了第一位女性毕业生。</p>
<p>有一位来这所学校进修的女性名叫罗瑟琳·努斯。罗瑟琳成年之前在布鲁克林公寓擦地为生。为了补贴家用她父母让她高中毕业之后便辍学。在其中一位老师的坚持下，她最终被送回学校。到了1937年，她坐在你们今天坐的位置，得到了伯克利大学的学位。罗瑟琳是我的祖母。她对我而言是巨大的鼓舞，而我今天仍然要感谢伯克利大学激发了她的潜能。我想花一点时间向在座的许多人表示特别的祝贺，你们是你们家庭中的第一代大学生，这是多么了不起的成就啊。<br><a id="more"></a></p>
<p>今天是值得庆祝的一天，庆祝你们为了这一刻到来所付出的一切努力。</p>
<p>今天是需要感谢的一天，感谢那些帮助你来到这里的人，那些曾经呵护你、教育你、鼓励你、安慰你的朋友。或者至少应该感谢那些当你在聚会上困得睡着的时候没有拿记号笔把你的脸画花的人。</p>
<p>今天是值得反思的一天，因为今天注定是你生命里承前启后的一天。</p>
<p>毕业典礼演讲本应是青春和智慧之舞，你们已拥有青春，期待着我为你们带来智慧的声音。等我站在这里告诉你们我的人生经历，然后你们可以将你们的帽子扔向空中，让你的家人为你多拍些照片——别忘了分享到Instragram——最后大家开开心心地回家。</p>
<p>然而今天会有一点不同。当然，我们还是会扔帽子拍照。但是我不是来告诉你们我从生活中学到的东西。<strong>今天我是来告诉你们我从死亡中学到的东西。</strong></p>
<p>我以前从未公开谈论这个话题，因为这对我来说很难。但是，我会尽量坚强，不让我的眼泪鼻涕把这身漂亮的伯克利礼服弄脏。</p>
<p>一年零十三天之前，我失去了我的丈夫，戴夫。他离去得非常突然。当时我们在墨西哥参加朋友的五十岁生日会。当时我在小憩，戴夫去健身。接下来的事情谁都没想到——我走进健身房看到他躺在地上。我飞回家告诉我的孩子们他们的父亲走了，亲眼看着他的骨灰深埋入墓地。</p>
<p>接下来好几个月，我无数次被哀伤吞没，一种无穷无尽的空虚感紧攥住我的心，让我无法思考，无法呼吸。</p>
<p>戴夫的死彻底改变了我，让我理解了一个人的悲伤能有多深，一个人失去至爱是多残酷的事。但是，我也学到了当生活的漩涡把我们吸进深潭时，我们依然可以从潭底跃起，钻出水面，重见光明。我还学到了在面对空虚和面对任何挑战时，我们可以选择找到快乐和意义。</p>
<p>我今天与你们分享这个，是希望你们在这充满希望，迈出人生的下一步的当下，能够学到希望、坚强以及内心光明永不熄灭，而这一课，是我经历了死亡才学到的。</p>
<p>今天，每个人都已经经历过一些小挫折。你想要一个A，但是你只得到了一个B，好吧，就算你的到了A，你依然不满足，因为你申请Facebook实习却只得到了到Google实习的机会。你会觉得这个世界上最痛苦的莫过于“求不得”。</p>
<p>《权力的游戏》电视剧和小说原著太不一样，但你又不想去读原著，因为这本书足足有4352页。</p>
<p>生活中你有很大可能面临越来越深的困境。比如错过一些机会：得不到的工作，失去健康，或是遇到意外事故。比如颜面受损：偏见和不公会像针一样扎在你的心脏。比如失去挚爱：破坏的关系无法修复。有时还有可能会失去生命。</p>
<p>你们当中有些人已经经历过那样刻骨铭心的困境。去年的大学奖章获得者拉狄卡由于她母亲的突然离世而发表了感人的演讲。</p>
<p>问题不在于不幸是否会发生在你身上，因为它们总有一天会的。今天我只想谈谈不幸发生后我们该怎么做，我们该如何克服困境，无论它从我们生命里夺走了什么，无论它如何给予你沉重打击。轻松的日子很容易渡过，问题是那些艰难的日子，那些你内心直面的挑战，这些经历将决定你是谁。你的价值不仅由你的成就所决定，它也取决于你如何击败困境。</p>
<p>在失去戴夫几周之后，我和我的朋友菲尔谈到一项亲子活动，而戴夫无法参加了。我们想了一个计划来弥补戴夫的空缺。我哭着对他说：“我想要戴夫”。菲尔搂住我说：“我们已经无法选择方案A了，所以我们只能把该死的问题从方案B中剔除。”</p>
<p>我们都得在某种程度上向生活妥协，选择方案B。问题是：接下来我们该怎么做？</p>
<p>作为硅谷的代表，有一份数据可以供我们参考。经过数十年研究人们如何应对挫折之后，心理学家马丁·塞利格曼发现人们一般会经历三个P——个人化、普适性和永久性——这对我们如何从挫折中挺过来至关重要。在我们处理挫折的过程中，重新振作的希望种子也随之植根于其中。</p>
<p><strong>第一个P是个人化(personalization)，认为不幸是因为自己造成的。这与承担责任不是一回事，承担责任是我们时刻应该做的。在这一阶段我们要学会，不应将所有事情发生都归咎于我们自身。</strong></p>
<p>当戴夫离开的时候，我有一个非常常见的反应，责怪自己。他在几秒钟内死于心律失常。我将他的病历翻来覆去，问自己我本可以或者说本应该做什么。直到我学会三个P之后我才接受了我无法阻止他死亡的事实。连他的医生都没能发现他有冠心病，主修经济学的我又怎么可能发现呢。</p>
<p>研究显示渡过个人化阶段会让你变得更坚强。懂得通过学生的失败不断调整教学方法和课程体系的老师们最终能教得比别人更好。大学中那些表现不佳但相信自己能游得更快的游泳者最终能成功。别把失败都记在自己账上，那样我们就能从失败中恢复，甚至越战越勇。</p>
<p><strong>第二个P是普适性(pervasiveness)——认为不幸会影响到生活的方方面面。你们听过那首歌《一切都是极好的》吧？还有另一首相反的《一切都是可怕的》。在吞噬一切的悲伤面前，我们无处可逃。</strong></p>
<p>儿童心理学家鼓励我让孩子们尽快回归正常的生活。于是在戴夫离开的第十天，他们回到了学校，我也回到了工作岗位。我记得当我参加我丈夫去世后的第一次Facebook会议时，整个人还深深笼罩在悲伤中。我当时满脑子都在想，这些人到底在谈论些什么，这些内容和我有什么关系？但后来我被卷入了讨论，有那么一秒钟，很短暂的一秒钟，令我忘记了死亡。</p>
<p>这短暂的一秒让我明白了我人生中的其他方面并不糟糕。我的孩子和我自己都很健康，我的朋友们和家人们都彼此相亲相爱。</p>
<p>失去另一半通常会导致经济拮据，尤其是女人失去丈夫。许多单身母亲或单身父亲都得想尽办法让收支平衡，而且他们得忙于工作而没有时间照顾他们的小孩。但我有经济保障，有自由支配的时间，在Facebook从事着我喜爱的工作。渐渐地，我的孩子哭得少，玩得多，晚上睡觉也安稳了。</p>
<p><strong>第三个P是永久性(permanence)——认为悲伤会永远持续。在几个月时间里，无论我做什么，我都觉得沉重的悲伤会永远持续下去。</strong></p>
<p>我们常常觉得自己一时的情绪表现会持续到永久——并让这些负面情绪蔓延（桑德伯格在这里说情绪像二阶导数一样，一种学霸使用的抽象比喻，学渣表示不懂——译者注）。我们感到焦虑，然后我们又因为自己焦虑而更加焦虑。我们感到难过，然后我们又为我们的难过而难过。事实上，我们固然要正视我们的情绪，然而也要明白这些情绪不会是永久的。我的导师告诉我，时间会治愈我，但现在我应该先前进一步去控制情绪。这是个好建议，但不是我所指的“向前一步”。（桑德伯格写了一本书正好是《Lean In》中文名叫《向前一步》鼓励女性在职场中不断前进——译者注）</p>
<p>第四个P就不用我来解释了吧……那当然是奶酪板上的披萨。</p>
<p>我多么希望在我像你们这么年轻的时候就已经懂得这三个P了，那样的话之前经历的很多次挫折都会因此而受益。</p>
<p>我离开学校开始工作的第一天，我的老板发现我不懂得如何在Lotus 1-2-3——一个你们父母这一辈人使用的古老电子表格软件——中输入数据。他惊讶地连下巴都快掉到地上了，他说，“不敢相信你竟然不会Lotus 1-2-3，你是怎么获得这份工作的？”然后他走出了房间。我回到家后觉得我马上要被炒掉了。我觉得自己做什么都不行……但结果我只是不善于做电子表格。如果我早点知道普适性，我就不会在那个星期感到如此焦虑了。</p>
<p>在我甩了我男朋友的时候，我希望我早点知道永久性。如果我知道情绪不会永远持续下去，我就会觉得好受一点，而如果我对自己诚实一点，我会知道那种关系的情感也经不起时间的考验。</p>
<p>在我被男朋友甩了的时候，我希望我早点知道个人化。有时候真的错不在你，而在他，比如说，这家伙从不洗澡。</p>
<p>所有的三个P在我二十多岁第一段婚姻结束的时候都经历过。我当时觉得无论我做出了什么成就，我的人生都是巨大的失败。</p>
<p>这三个P是我们经历许多事情时都会有的情绪反应，它们存在于我们的职业生涯中，存在于我们的私生活里，存在于我们的人际关系中。你很可能因为生活中的一些事正在经历其中一种反应。如果你意识到自己正在掉进这些陷阱，你就能自救。就如同我们的身体有生理免疫系统，我们的大脑也同样有心理免疫系统——你可以采取一些措施来加强免疫。</p>
<p>一天，我的一位心理学家朋友亚当·格兰特，建议我想想情况究竟有多遭。这完全不合常理，通常恢复的方法不都是尽量找正能量吗？“更遭？”我说，“你不是在开玩笑吧？事情怎么可能变得更糟？”他的回答直击人心：“戴夫有可能在他开着车带着孩子们出去时发病。”真的，他说出来的那一刻，我很庆幸我其他的家庭成员们都健康地活着。这种感恩减轻了部分悲痛。</p>
<p>寻找感恩是恢复的关键。那些花时间感恩的人比其他人过得更快乐和健康。事实证明计算你的祝福你会获得更多祝福。我今年的新年目标是在每天夜晚睡觉前写下三个愉快的时刻。这个简单的练习改变了我的生活，因为不管每天发生什么，我都会在睡前思考一些令人愉快的事情。你也可以尝试一下，从今晚开始写，有那么多有趣的事情，趁你睡觉前还记得它们，把它们写下来。</p>
<p>上个月，在戴夫过世一周年纪念日的十一天之前，我在我的一位朋友面前痛哭。我们挤坐在浴室地板上。我说：“十一天，一年前的今天，他的生命只剩下十一天了。然而我们对此却一无所知。”我们泪眼朦胧地对视着，然后问自己如果我们知道我们只剩下十一天可活的话，我们会如何渡过。</p>
<p>今天你们毕业了，你们能够回答如果你们只剩下十一天你们会如何渡过吗？我不是让你们去及时行乐——当然今晚例外。我的意思是要你们理解生命中的每一天是多么的珍贵，珍惜自己的每一天。</p>
<p>几年前，我的母亲做了髋关节置换手术。在她年轻的时候，她走路从来没有疼痛。但是在她髋关节破碎之后，走每一步都很疼。现在，尽管已经手术过了很多年，她依然对走每一步不疼痛心存感激——这是她以前从未想到过的。</p>
<p>今天我站在这里，在告别了我这辈子所经历的最遭糕的日子一年之后，有两件事情是真实的。那段经历在我内心深处留下了一个巨大的伤疤，它就在那里，我可以触碰到它。我以前从来不知道我可以那么经常哭泣，有那么多眼泪流。</p>
<p>但我也意识到我走路不疼。第一次，我感谢每一次呼吸，感谢生命本身的恩赐。我过去每五年庆祝一次生日，偶尔参加朋友们的生日会。现在，我每年都庆祝。我过去常常在睡前为那一天我搞砸的事情忧心——相信我，不顺心的事情常常有很多。现在，我努力地去关注每一天快乐的时刻。</p>
<p>直到我失去我的丈夫我才学会了更深刻的感恩，懂得感恩我朋友们的好意，感恩我家人的爱，感恩孩子们的欢笑，这对我来说是莫大的讽刺。我希望你们可以获得感恩，不仅仅是在今天这样的好日子里，在艰难的日子里，你们更需要这样的感恩。</p>
<p>在人生的旅途中有许多快乐的时刻。一次一直想去的旅行，与你喜欢的人的初吻，获得一份你真心喜欢的工作，打败斯坦福（加油！）。所有的这些事情都可能发生，请尽情享受它们。</p>
<p>我希望你珍惜你过的每一天，每天都过得快乐并有意义。</p>
<p>我希望你们人生的每一步都没有痛苦，并充满感恩。</p>
<p>当挑战来临的时候，我希望你们记得学习和成长的力量源自你们的内在。你们不是生来就具有从困境中恢复的韧性。如同肌肉一样，你可以锻炼出它们，在需要的时候依靠它们脱离困境。在那个过程中，你会弄清楚你究竟是谁，你能做最好的自己。</p>
<p>2016届学生，当你们离开伯克利大学时，要建立起你们的韧性。</p>
<p><strong>建立起你们自己的韧性，当悲剧或失望来袭，要知道你们能扛过任何事。我保证你们有这个能力。常言道，我们比我们想象的更脆弱，但我们比我们想象的更坚强。</strong></p>
<p>建立韧性组织，如果普通人都能做到这一点，你也能，因为在伯克利大学的我们，是想让世界变得更美好的一群人。不要停下让世界更美好的脚步，无论是觉得会议室不具有代表性，还是觉得校园不够安全，大声说出来，特别是在像这样的一个你所拥有的宝贵环境里。我最喜欢的一句广告语是：“在Facebook里，没有什么是别人的问题。”当你看到什么东西出错了，去修正它。</p>
<p>建立韧性社区，通过我们彼此的联系，我们能发现人性——生存的愿望和爱的能力。与你的家人和朋友在一起，我的意思是面对面，而不是仅仅发送一个爱心表情的短信。</p>
<p>互相鼓励，互相帮助，把该死的问题从方案B中剔除，然后庆祝每一个人的每一刻的快乐。</p>
<p>整个世界都展现在你们面前。我迫不及待地想看你们将做些什么。</p>
<p>恭喜大家顺利毕业，继续加油！</p>
<p>出自:<a href="http://www.zcfy.cc/article/283" target="_blank" rel="external">当悲剧或失望来袭，要知道你们能扛过任何事</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cocoa中使用NSTask运行脚本]]></title>
      <url>http://yoursite.com/2016/05/22/Cocoa%E4%B8%AD%E4%BD%BF%E7%94%A8NSTask%E8%BF%90%E8%A1%8Cshell.html</url>
      <content type="html"><![CDATA[<h2 id="Cocoa中使用NSTask运行脚本"><a href="#Cocoa中使用NSTask运行脚本" class="headerlink" title="Cocoa中使用NSTask运行脚本"></a>Cocoa中使用NSTask运行脚本</h2><blockquote>
<p>Cocoa编程中有时候会遇到需要运行一些脚本或者Shell命令的地方。这个时候，NSTask可能是一个不错的选择。</p>
<p>NSTask是MAC OS X用来执行系统命令的一个类库。</p>
<p>当然，也可以借助第三方封装的类库，比如:<a href="https://github.com/atg/taskit" target="_blank" rel="external">taskit</a></p>
</blockquote>
<h4 id="使用一个例子来知道怎么用"><a href="#使用一个例子来知道怎么用" class="headerlink" title="使用一个例子来知道怎么用:"></a>使用一个例子来知道怎么用:</h4><blockquote>
<p>场景是这样的:</p>
<p>假如，需要在程序内部嵌入一个nodejs工程，然后借助cocoa界面的一些操作是的外部与nodejs发生交互。</p>
</blockquote>
<a id="more"></a>
<p>代码如下:</p>
<pre><code>let task:NSTask! = NSTask();
let en:NSDictionary? = task.environment;
if en == nil {
    task.environment = [&quot;PATH&quot;:&quot;/usr/bin;/usr/local/bin/node;/usr/local/bin/thinkjs;/usr/local/bin/npm&quot;];
}
print(task.environment);
task.launchPath = &quot;/bin/bash&quot;;
task.arguments = [&quot;-l&quot;,&quot;-c&quot;,&quot;cd /Users/Tywin/Desktop/DemoDir/; /bin/echo 1234;/usr/local/bin/thinkjs new app; cd /Users/Tywin/Desktop/DemoDir/app; /usr/local/bin/npm install;/usr/local/bin/thinkjs module Test; /usr/local/bin/npm start;&quot;];
task.launch();
task.waitUntilExit();
</code></pre><p><strong>首先</strong>，需要声明一个NSTask对象；</p>
<p><strong>然后</strong>，如果需要用到除了系统之外的一些环境变量，需要为task对象设置环境变量，只有这样，才能完美运行后面的命令。</p>
<p><strong>最后</strong>，设置launchPath，arguments，运行。</p>
<p>–<br>整个过程比较简单，shell命令那边就是打开一个文件夹，创建一个thinkjs的工程，运行工程依赖，然后使用npm start启动服务器。</p>
<p>这里需要注意的一个地方就是launchpath以及arguments里面的一些参数问题，发现在stackoverflow有个人是这样解释的，自我发觉解释的比较到位:</p>
<blockquote>
<p>bash has three main modes of operation:</p>
<p>If you pass it -c “some command string”, it’ll execute that command string.<br>If you pass it a file path as an argument, it’ll read commands from that file and execute them (i.e. execute the file as a shell script).<br>If you don’t pass it any arguments, it’ll read and execute commands from standard input.<br>Since you passed it the arguments “/bin/echo” and “1234”, it’s assuming you want mode 2, so it tries to read shell commands from /bin/echo, and fails. I’m not clear on exactly what you’re trying to achieve, but I see several options that might be relevant:</p>
<p>If you’re trying to execute a binary (e.g. /bin/echo), just execute that directly without using bash at all:<br>task.launchPath = “/bin/echo”<br>task.arguments = [“1234”]<br>If you need to execute a command string (i.e. if you need the shell to parse it before executing it, so e.g. wildcards get expanded, or there’s more than one command, or…), use bash -c:<br>task.launchPath = “/bin/bash”<br>task.arguments = [“-c”, “/bin/echo 1234; ls *”]<br>If you need to execute an actual script, i.e. a file with shell commands in it, then leave runTask alone, but pass it an actual script:<br>runTask([“/path/to/script”, “scriptarg”, “another argument”])</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《人生对人生观开的玩笑》摘文]]></title>
      <url>http://yoursite.com/2016/05/21/%E3%80%8A%E4%BA%BA%E7%94%9F%E5%AF%B9%E4%BA%BA%E7%94%9F%E8%A7%82%E5%BC%80%E7%9A%84%E7%8E%A9%E7%AC%91%E3%80%8B.html</url>
      <content type="html"><![CDATA[<p><img src="/images/maolu.jpg" class="full-image"></p>
<p>一个人对有魅力的异性产生一时的迷恋的感觉，倾慕对方，这是很正常的事情，我偶尔也这样。关键是我们的迷恋是不是只是心思活络，而不是行为也跟着活络。很多人把心动，迷恋或者倾慕误认为爱情，殊不知心动跟真正的爱情根本无法相比。心动的光芒最多只是颗钻石的光芒，让你惊叹于它的华丽，恨不得立刻拥有；但真爱的光芒就像阳光，久了也许会让人觉得稀松平常，但这种光芒能温暖你，照耀你，一旦失去，你就会发现整个世界都黑暗了。可惜好多人没有意识到这一点</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端UI规范（针对切图命名与文件整理）]]></title>
      <url>http://yoursite.com/2016/05/21/%E7%A7%BB%E5%8A%A8%E7%AB%AFUI%E8%A7%84%E8%8C%83%EF%BC%88%E9%92%88%E5%AF%B9%E5%88%87%E5%9B%BE%E5%91%BD%E5%90%8D%E4%B8%8E%E6%96%87%E4%BB%B6%E6%95%B4%E7%90%86%EF%BC%89.html</url>
      <content type="html"><![CDATA[<p>移动端UI规范（针对切图命名与文件整理）</p>
<blockquote>
<p>整理了移动端UI的命名规范与文件目录规范</p>
</blockquote>
<p><strong>切图命名英文缩写三个原则:</strong></p>
<ol>
<li>较短的单词可通过去掉“元音”形成缩写;</li>
<li>较长的单词可取单词的头几个字母形成缩写;</li>
<li>此外还有一些约定成俗的英文单词缩写<a id="more"></a>
</li>
</ol>
<h4 id="第一部分设备尺寸及图标大小合集"><a href="#第一部分设备尺寸及图标大小合集" class="headerlink" title="第一部分设备尺寸及图标大小合集"></a>第一部分设备尺寸及图标大小合集</h4><p><img src="/images/image/chicun.jpg" alt=""><br><img src="/images/image/chicun1.jpg" alt=""><br><img src="/images/image/chicun2.jpg" alt=""><br><img src="/images/image/chicun3.jpg" alt=""><br><img src="/images/image/chicun4.jpg" alt=""><br><img src="/images/image/chicun5.jpg" alt=""><br><img src="/images/image/chicun6.jpg" alt=""></p>
<h4 id="第二部分：iOS-APP界面设计切图命名规范"><a href="#第二部分：iOS-APP界面设计切图命名规范" class="headerlink" title="第二部分：iOS APP界面设计切图命名规范"></a>第二部分：iOS APP界面设计切图命名规范</h4><p><img src="/images/image/img_ios_1.jpg" alt=""><br><img src="/images/image/mingmin.png" alt=""></p>
<h4 id="第三部分：手机APP切图文件整理"><a href="#第三部分：手机APP切图文件整理" class="headerlink" title="第三部分：手机APP切图文件整理"></a>第三部分：手机APP切图文件整理</h4><p><img src="/images/image/img_ios_2.png" alt=""></p>
<h3 id="参考规范"><a href="#参考规范" class="headerlink" title="参考规范:"></a>参考规范:</h3><p><a href="http://www.xueui.cn/tutorials/app-tutorials/app-code-examples-with-ui-design-method.html" target="_blank" rel="external">http://www.xueui.cn/tutorials/app-tutorials/app-code-examples-with-ui-design-method.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何愉快的使用ESLint进行代码校验]]></title>
      <url>http://yoursite.com/2016/05/21/%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E7%9A%84%E4%BD%BF%E7%94%A8ESLint%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A0%A1%E9%AA%8C.html</url>
      <content type="html"><![CDATA[<p>如何愉快的使用ESLint进行代码校验</p>
<p>在团队协作中，为避免低级 Bug、产出风格统一的代码，会预先制定编码规范。我们使用ESLint这一代码规范检测工具进行最基本的语法检测，或者结合自定义的规则来使得ESLint完美运行在你的项目中</p>
<h3 id="三个问题？"><a href="#三个问题？" class="headerlink" title="三个问题？"></a>三个问题？</h3><blockquote>
<p>一. ESLint是什么？</p>
<p>二. ESLint有什么用？</p>
<p>三. ESLint怎么用？</p>
</blockquote>
<h3 id="一-ESLint是什么？"><a href="#一-ESLint是什么？" class="headerlink" title="一. ESLint是什么？"></a>一. ESLint是什么？</h3><p>ESLint 是一个开源的 JavaScript 代码校验工具，最初是由 Nicholas C. Zakas 在2013年创建的。经常被用来发现问题的模式或代码，不符合特定的风格准则。</p>
<blockquote>
<p>ESLint 创建的首要原因是为了让开发人员创建自己的校验规则，ESLint 的目的是让所有的规则完全可插拔。虽然ESLint将附带一些内置的规则，你可以在任何时间点动态加载规则。</p>
</blockquote>
<a id="more"></a>
<h3 id="二-ESLint有什么用？"><a href="#二-ESLint有什么用？" class="headerlink" title="二. ESLint有什么用？"></a>二. ESLint有什么用？</h3><ul>
<li>可以辅助编码规范执行，有效控制代码质量</li>
<li>默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移；</li>
<li>规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；</li>
<li>包含代码风格检测的规则；</li>
<li>支持插件扩展、自定义规则。</li>
</ul>
<p>例如：约定好ESLint的规则之后，不符合规范的代码会在编写期间报出错误或者异常信息:<br>(未配置示例)</p>
<p><img src="/images/约束示例.png" alt=""></p>
<h3 id="三-ESLint怎么用？"><a href="#三-ESLint怎么用？" class="headerlink" title="三. ESLint怎么用？"></a>三. ESLint怎么用？</h3><p><strong>以搭配WebStorm为例</strong></p>
<blockquote>
<p>环境: MAC OSX</p>
<p>IDE: WebStorm 10</p>
<p>Node版本: v5.4.1</p>
</blockquote>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>建议全局安装</p>
<pre><code>npm install -g eslint
</code></pre><h4 id="2-配置（Thinkjs工程为例）"><a href="#2-配置（Thinkjs工程为例）" class="headerlink" title="2.配置（Thinkjs工程为例）"></a>2.配置（Thinkjs工程为例）</h4><ol>
<li>初始化一个Thinkjs工程Demo，添加如下依赖工程:<br>在package.json文件中添加如下依赖（如果没有package.son文件需首先通过npm init 创建package.son 文件）：</li>
</ol>
<pre><code>&quot;devDependencies&quot;: {
    &quot;babel-core&quot;: &quot;^6.5.2&quot;,
    &quot;babel-eslint&quot;: &quot;^4.1.8&quot;,
    &quot;eslint&quot;: &quot;^2.1.0&quot;,
    &quot;eslint-plugin-promise&quot;: &quot;^1.0.8&quot;,
    &quot;eslint-plugin-standard&quot;: &quot;^1.3.2&quot;,
    &quot;eslint-plugin-react&quot;: &quot;^4.2.3&quot;
  }
</code></pre><p>在工程根目录下运行如下命令：</p>
<pre><code>npm install
</code></pre><blockquote>
<p><strong>如遇依赖报错，请全局安装依赖组件。</strong></p>
<p>如:提示eslint-plugin-promise、eslint-plugin-standard安装失败的信息，保险期间需要全局安装</p>
<pre><code>npm install -g eslint-plugin-promise

npm install -g eslint-plugin-standard
</code></pre></blockquote>
<ol>
<li>检查WebStorm的配置信息</li>
</ol>
<blockquote>
<p>ESLint安装成功之后，在WebStorm可以看到代码质量检查工具中存在ESLint工具</p>
</blockquote>
<p><img src="/images/webstorm.png" alt=""></p>
<hr>
<p><strong>可以通过以下三种方式配置 ESLint:</strong></p>
<ul>
<li>使用 .eslintrc 文件（支持 JSON 和 YAML 两种语法）；</li>
<li>在 package.json 中添加 eslintConfig 配置块；</li>
<li>直接在代码文件中定义。</li>
</ul>
<blockquote>
<p>为了更好的保持团队协作的规范性和一致性，推荐使用.eslintrc 文件进行配置</p>
</blockquote>
<p>将eslintrc.json重命名为.eslintrc放置于工程根目录并修改WebStorm的ESLint插件配置:<br><img src="/images/配置.png" alt=""></p>
<p>规则已经参照<a href="https://coding.net/u/senon-ye/p/wiki/git/blob/master/JS:React%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.md" target="_blank" rel="external">JS/React代码简要规范</a>做出大部分调整</p>
<h3 id="完成配置后，使用WebStorm编写时，即可检测语法问题"><a href="#完成配置后，使用WebStorm编写时，即可检测语法问题" class="headerlink" title="完成配置后，使用WebStorm编写时，即可检测语法问题:"></a>完成配置后，使用WebStorm编写时，即可检测语法问题:</h3><p>配置规范与说明参照Rules文件夹下各种配置规范</p>
<h3 id="规则一览"><a href="#规则一览" class="headerlink" title="规则一览"></a>规则一览</h3><pre><code>&quot;no-alert&quot;: 0,//禁止使用alert confirm prompt
 &quot;no-array-constructor&quot;: 2,//禁止使用数组构造器
 &quot;no-bitwise&quot;: 0,//禁止使用按位运算符
 &quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee
 &quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名
 &quot;no-class-assign&quot;: 2,//禁止给类赋值
 &quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句
 &quot;no-console&quot;: 2,//禁止使用console
 &quot;no-const-assign&quot;: 2,//禁止修改const声明的变量
 &quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1)
 &quot;no-continue&quot;: 0,//禁止使用continue
 &quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符
 &quot;no-debugger&quot;: 2,//禁止使用debugger
 &quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符
 &quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/
 &quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 {a:1,a:1}
 &quot;no-dupe-args&quot;: 2,//函数参数不能重复
 &quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复
 &quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句
 &quot;no-empty&quot;: 2,//块语句中的内容不能为空
 &quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空
 &quot;no-empty-label&quot;: 2,//禁止使用空label
 &quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符
 &quot;no-eval&quot;: 1,//禁止使用eval
 &quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值
 &quot;no-extend-native&quot;: 2,//禁止扩展native对象
 &quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定
 &quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换
 &quot;no-extra-parens&quot;: 2,//禁止非必要的括号
 &quot;no-extra-semi&quot;: 2,//禁止多余的冒号
 &quot;no-fallthrough&quot;: 1,//禁止switch穿透
 &quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3.
 &quot;no-func-assign&quot;: 2,//禁止重复的函数声明
 &quot;no-implicit-coercion&quot;: 1,//禁止隐式转换
 &quot;no-implied-eval&quot;: 2,//禁止使用隐式eval
 &quot;no-inline-comments&quot;: 0,//禁止行内备注
 &quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数）
 &quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式
 &quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量
 &quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格
 &quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性
 &quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同
 &quot;no-labels&quot;: 2,//禁止标签声明
 &quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块
 &quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句
 &quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）
 &quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型
 &quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格
 &quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格
 &quot;no-multi-spaces&quot;: 1,//不能用多余的空格
 &quot;no-multi-str&quot;: 2,//字符串不能用\换行
 &quot;no-multiple-empty-lines&quot;: [1, {&quot;max&quot;: 2}],//空行最多不能超过2行
 &quot;no-native-reassign&quot;: 2,//不能重写native对象
 &quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有!
 &quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算
 &quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值
 &quot;no-new-func&quot;: 1,//禁止使用new Function
 &quot;no-new-object&quot;: 2,//禁止使用new Object()
 &quot;no-new-require&quot;: 2,//禁止使用new require
 &quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number
 &quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON()
 &quot;no-octal&quot;: 2,//禁止使用八进制数字
 &quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列
 &quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值
 &quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接
 &quot;no-plusplus&quot;: 0,//禁止使用++，--
 &quot;no-process-env&quot;: 0,//禁止使用process.env
 &quot;no-process-exit&quot;: 0,//禁止使用process.exit()
 &quot;no-proto&quot;: 2,//禁止使用__proto__属性
 &quot;no-redeclare&quot;: 2,//禁止重复声明变量
 &quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/
 &quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错
 &quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式
 &quot;no-script-url&quot;: 0,//禁止使用javascript:void(0)
 &quot;no-self-compare&quot;: 2,//不能比较自身
 &quot;no-sequences&quot;: 0,//禁止使用逗号运算符
 &quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名
 &quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用
 &quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格
 &quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2]
 &quot;no-sync&quot;: 0,//nodejs 禁止同步方法
 &quot;no-ternary&quot;: 0,//禁止使用三目运算符
 &quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格
 &quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super
 &quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;;
 &quot;no-undef&quot;: 1,//不能有未定义的变量
 &quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined
 &quot;no-undefined&quot;: 2,//不能使用undefined
 &quot;no-unexpected-multiline&quot;: 2,//避免多行表达式
 &quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾
 &quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;
 &quot;no-unreachable&quot;: 2,//不能有无法执行的代码
 &quot;no-unused-expressions&quot;: 2,//禁止无用的表达式
 &quot;no-unused-vars&quot;: [2, {&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;}],//不能有声明后未被使用的变量或参数
 &quot;no-use-before-define&quot;: 2,//未定义前不能使用
 &quot;no-useless-call&quot;: 2,//禁止不必要的call和apply
 &quot;no-void&quot;: 2,//禁用void操作符
 &quot;no-var&quot;: 0,//禁用var，用let和const代替
 &quot;no-warning-comments&quot;: [1, { &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; }],//不能有警告备注
 &quot;no-with&quot;: 2,//禁用with

 &quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格
 &quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来
 &quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号
 &quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter
 &quot;block-scoped-var&quot;: 0,//块语句中使用var
 &quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格
 &quot;callback-return&quot;: 1,//避免多次调用回调什么的
 &quot;camelcase&quot;: 2,//强制驼峰法命名
 &quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号
 &quot;comma-spacing&quot;: 0,//逗号前后的空格
 &quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾
 &quot;complexity&quot;: [0, 11],//循环复杂度
 &quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的
 &quot;consistent-return&quot;: 0,//return 后面是否允许省略
 &quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名
 &quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super
 &quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if(){} 中的{}
 &quot;default-case&quot;: 2,//switch语句最后必须有default
 &quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾
 &quot;dot-notation&quot;: [0, { &quot;allowKeywords&quot;: true }],//避免不必要的方括号
 &quot;eol-last&quot;: 0,//文件以单一的换行符结束
 &quot;eqeqeq&quot;: 2,//必须使用全等
 &quot;func-names&quot;: 0,//函数表达式必须有名字
 &quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式
 &quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格
 &quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤
 &quot;handle-callback-err&quot;: 0,//nodejs 处理错误
 &quot;id-length&quot;: 0,//变量名长度
 &quot;indent&quot;: [2, 4],//缩进风格
 &quot;init-declarations&quot;: 0,//声明时必须赋初值
 &quot;key-spacing&quot;: [0, { &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true }],//对象字面量中冒号的前后空格
 &quot;lines-around-comment&quot;: 0,//行前/行后备注
 &quot;max-depth&quot;: [0, 4],//嵌套块深度
 &quot;max-len&quot;: [0, 80, 4],//字符串最大长度
 &quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度
 &quot;max-params&quot;: [0, 3],//函数最多只能有3个参数
 &quot;max-statements&quot;: [0, 10],//函数内最多有几个声明
 &quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用
 &quot;new-parens&quot;: 2,//new时必须加小括号
 &quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行
 &quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格
 &quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法
 &quot;one-var&quot;: 1,//连续声明
 &quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的
 &quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首
 &quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行
 &quot;prefer-const&quot;: 0,//首选const
 &quot;prefer-spread&quot;: 0,//首选展开运算
 &quot;prefer-reflect&quot;: 0,//首选Reflect的方法
 &quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &apos;&apos;
 &quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号
 &quot;radix&quot;: 2,//parseInt必须指定第二个参数
 &quot;id-match&quot;: 0,//命名检测
 &quot;require-yield&quot;: 0,//生成器函数必须有yield
 &quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾
 &quot;semi-spacing&quot;: [0, {&quot;before&quot;: false, &quot;after&quot;: true}],//分号前后空格
 &quot;sort-vars&quot;: 0,//变量声明时排序
 &quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格
 &quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块{前面要不要有空格
 &quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格
 &quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格
 &quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格
 &quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格
 &quot;space-unary-ops&quot;: [0, { &quot;words&quot;: true, &quot;nonwords&quot;: false }],//一元运算符的前/后要不要加空格
 &quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的
 &quot;strict&quot;: 2,//使用严格模式
 &quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN()
 &quot;valid-jsdoc&quot;: 0,//jsdoc规则
 &quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值
 &quot;vars-on-top&quot;: 2,//var必须放在作用域顶部
 &quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格
 &quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来
 &quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件
</code></pre><hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul>
<li><a href="https://www.npmjs.com/package/eslint-plugin-react" target="_blank" rel="external">eslint-plugin-react</a></li>
<li><a href="http://www.tuicool.com/articles/7JZZJzn" target="_blank" rel="external">ESLint 使用入门</a></li>
<li><a href="https://github.com/Jocs/ESLint_docs" target="_blank" rel="external">ESLint_docs</a></li>
<li><a href="http://eslint.org/docs" target="_blank" rel="external">http://eslint.org/</a></li>
<li><a href="http://www.kancloud.cn/manual/thinkjs/76367" target="_blank" rel="external">ThinkJs 2.0 编码规范</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Sublime Text3 开发React-Native的配置]]></title>
      <url>http://yoursite.com/2016/05/21/%E4%BD%BF%E7%94%A8Sublime-Text3-%E5%BC%80%E5%8F%91React-Native%E7%9A%84%E9%85%8D%E7%BD%AE.html</url>
      <content type="html"><![CDATA[<p>使用Sublime Text3 开发React-Native的配置</p>
<blockquote>
<p>Sublime Text3作为功能强大，使用较为广泛的编辑器，有很强的自定义功能，插件库很庞大，针对新语言插件更新很快，配合使用可以快速搭建适配语言的开发环境。<br>Sublime Text3为共享软件，可在网上搜索下载破解版。</p>
</blockquote>
<h3 id="使用Package-Control组件安装所需插件"><a href="#使用Package-Control组件安装所需插件" class="headerlink" title="使用Package Control组件安装所需插件"></a>使用Package Control组件安装所需插件</h3><p>在使用Package Control之前首先要安装Package Control。<br>一、简单的安装方法</p>
<p>使用Ctrl+`快捷键或者通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：</p>
<pre><code>import urllib.request,os,hashlib; h = &apos;2915d1851351e5ee549c20394736b442&apos; + &apos;8bc59f460fa1548d1514676163dafc88&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)
</code></pre><p>如果顺利的话，此时就可以在Preferences菜单下看到Package Settings和Package Control两个菜单了。<br><a id="more"></a><br>二、手动安装</p>
<p>可能由于各种原因，无法使用代码安装，那可以通过以下步骤手动安装Package Control：</p>
<p>1.点击Preferences &gt; Browse Packages菜单</p>
<p>2.进入打开的目录的上层目录，然后再进入Installed Packages/目录</p>
<p>3.下载Package Control.sublime-package并复制到Installed Packages/目录</p>
<p>4.重启Sublime Text。</p>
<hr>
<p>安装好Package Control之后就可以开始配置React-Native所用到的插件。</p>
<p><strong>babel-sublime</strong></p>
<p><strong>sublimeLinter-jsxhint</strong></p>
<p><strong>JsFormat</strong></p>
<p><strong><a href="https://github.com/reactjs/sublime-react" target="_blank" rel="external">sublime-react</a></strong></p>
<h3 id="1-BABEL-SUBLIME"><a href="#1-BABEL-SUBLIME" class="headerlink" title="1. BABEL-SUBLIME"></a>1. BABEL-SUBLIME</h3><p>支持ES6， React.js, jsx代码高亮，对 JavaScript, jQuery 也有很好的扩展。</p>
<p>安装</p>
<p>PC：Ctrl+shift+p<br>Mac：Cmd+shift+p<br>选择Package Control:install package<br>输入babel进行安装</p>
<p>配置</p>
<p>打开.js, .jsx 后缀的文件;<br>打开菜单view， Syntax -&gt; Open all with current extension as… -&gt; Babel -&gt; JavaScript (Babel)，选择babel为默认 javascript 打开syntax</p>
<h3 id="2-SUBLIMELINTER-JSXHINT"><a href="#2-SUBLIMELINTER-JSXHINT" class="headerlink" title="2. SUBLIMELINTER-JSXHINT"></a>2. SUBLIMELINTER-JSXHINT</h3><p>JSX 代码审查，实时提示语法错误, 帮助快速定位错误点.</p>
<p>安装 node.js<br>安装 jsxhint<br>jsxhint安装:</p>
<pre><code>npm install -g jsxhint
</code></pre><p>PC上ctrl+shift+p（Mac:Cmd+shift+p）打开面板输入sublimeLinter-jsx安装(依赖于 sublimeLinter)</p>
<h3 id="3-JSFORMAT-格式化-JS-代码"><a href="#3-JSFORMAT-格式化-JS-代码" class="headerlink" title="3. JSFORMAT 格式化 JS 代码"></a>3. JSFORMAT 格式化 JS 代码</h3><p>jsformat 是 sublime 上 js 格式化比较好用的插件之一，通过修改它的e4x 属性可以使它支持 jsx。</p>
<p>安装</p>
<p>PC上ctrl+shift+p（Mac:Cmd+shift+p）打开面板输入JsFormat安装.</p>
<p>使用</p>
<p>打开preferences -&gt; Package Settings -&gt; JsFormat -&gt; Setting - Users,输入以下代码：</p>
<pre><code>{
  &quot;e4x&quot;: true,
  // jsformat options
  &quot;format_on_save&quot;: true,
}
</code></pre><p>即可保存时自动格式化，并支持 jsx 类型文件.</p>
<h3 id="4-sublime-react"><a href="#4-sublime-react" class="headerlink" title="4. sublime-react"></a>4. sublime-react</h3><p>首先必须安装 Sublime Package Manager.</p>
<p>安装: ⌘+shift+p on MacOS/Linux, ctrl+shift+p on Windows</p>
<p>输入 install, 选择 Package Control: Install Package</p>
<p>输入 React, 选择 ReactJS</p>
<p><img src="/images/pic.gif" alt="pic.gif"></p>
<p>快捷键列表:</p>
<pre><code>cdm→  componentDidMount: fn() { ... }

cdup→  componentDidUpdate: fn(pp, ps) { ... }

cs→  var cx = React.addons.classSet;

cwm→  componentWillMount: fn() { ... }

cwr→  componentWillReceiveProps: fn(np) { ... }

cwu→  componentWillUpdate: fn(np, ns) { ... }

cwun→  componentWillUnmount: fn() { ... }

cx→  cx({ ... })

fdn→  React.findDOMNode(...)

fup→  forceUpdate(...)

gdp→  getDefaultProps: fn() { return {...} } 

gis→  getInitialState: fn() { return {...} } 

ism→  isMounted()

props→  this.props.

pt→  propTypes { ... }

rcc→  component skeleton

refs→  this.refs.

ren→  render: fn() { return ... }

scu→  shouldComponentUpdate: fn(np, ns) { ... }

sst→  this.setState({ ... })

state→  this.state.
</code></pre><hr>
<blockquote>
<p>参考:</p>
<p><a href="http://www.07net01.com/2015/11/962545.html" target="_blank" rel="external">在SublimeText上搭建ReactJS开发环境</a></p>
<p><a href="http://www.cnblogs.com/terrylin/p/4942332.html" target="_blank" rel="external">Sublime Text 3 搭建 React.js 开发环境</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CenterOS配置Node服务器与MongoDB]]></title>
      <url>http://yoursite.com/2016/05/20/CenterOS%E9%85%8D%E7%BD%AENode%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8EMongoDB.html</url>
      <content type="html"><![CDATA[<h2 id="CenterOS-nodejs-配置说明"><a href="#CenterOS-nodejs-配置说明" class="headerlink" title="CenterOS nodejs 配置说明"></a>CenterOS nodejs 配置说明</h2><blockquote>
<p>vps:搬瓦工</p>
<p>os:centeros 6.5 x86</p>
</blockquote>
<h3 id="1-安装node"><a href="#1-安装node" class="headerlink" title="1. 安装node:"></a>1. 安装node:</h3><p>从EPEL库安装Node.js</p>
<p>另一个有效且简单的方法来安装Node.js就是从官方库。这同样确保您可以访问到EPEL库，可以通过运行以下命令。</p>
<pre><code>sudo yum install epel-release
</code></pre><p>现在可以使用yum命令安装Node.js了。</p>
<pre><code>sudo yum install nodejs
</code></pre><p>因为在开发过程中我需要管理节点包，我还要安装新公共管理的软件包管理器，使用以下命令。</p>
<pre><code>sudo yum install npm
</code></pre><a id="more"></a>
<h3 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h3><pre><code>yum  group install &quot;Development Tools&quot;
</code></pre><h3 id="3-mongodDB"><a href="#3-mongodDB" class="headerlink" title="3. mongodDB"></a>3. mongodDB</h3><blockquote>
<p>一种使用MongoDB安装文件安装<br><a href="http://blog.csdn.net/zhangfeng19880710/article/details/20166853" target="_blank" rel="external">http://blog.csdn.net/zhangfeng19880710/article/details/20166853</a><br><a href="http://www.cnblogs.com/shanyou/archive/2012/07/14/2591838.html" target="_blank" rel="external">http://www.cnblogs.com/shanyou/archive/2012/07/14/2591838.html</a></p>
</blockquote>
<pre><code>yum install mongodb
yum install mongodb-server
</code></pre><p>前面安装来说都是很顺利的，但是在启动的时候遇到了这么一个问题</p>
<pre><code>ERROR: dbpath (/data/db/) does not exist.
Create this directory or give existing directory in --dbpath. See http://dochub.mongodb.org/core/startingandstoppingmongo
</code></pre><p>从这个问题来看 ，应该是没有创建 /data/db 目录，那么就用 </p>
<pre><code>sudo mkdir -p /data/db
</code></pre><p>命令创建。但问题是重新启动还是出现了同样的问题，原因是文件夹的权限不够，那么解决的方法就是允许文件夹有读写的权限即可，那么运行下面的命令</p>
<pre><code>sudo chmod 777 -R /data
</code></pre>]]></content>
    </entry>
    
  
  
</search>
